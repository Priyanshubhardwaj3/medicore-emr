# Generated by Django 5.2 on 2025-08-04 09:19

import ckeditor.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import emr_app.models
import phonenumber_field.modelfields
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('appointment_date', models.DateTimeField()),
                ('duration', models.PositiveIntegerField(default=30, help_text='Duration in minutes')),
                ('appointment_type', models.CharField(choices=[('Consultation', 'Consultation'), ('Follow-up', 'Follow-up'), ('Emergency', 'Emergency'), ('Routine Checkup', 'Routine Checkup'), ('Vaccination', 'Vaccination'), ('Lab Test', 'Lab Test'), ('Other', 'Other')], default='Consultation', max_length=50)),
                ('status', models.CharField(choices=[('Scheduled', 'Scheduled'), ('Confirmed', 'Confirmed'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled'), ('No Show', 'No Show')], default='Scheduled', max_length=20)),
                ('reason', models.TextField(help_text='Reason for appointment')),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
            ],
            options={
                'ordering': ['appointment_date'],
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('specialization', models.CharField(choices=[('General', 'General Practitioner'), ('Cardiology', 'Cardiology'), ('Dermatology', 'Dermatology'), ('Endocrinology', 'Endocrinology'), ('Gastroenterology', 'Gastroenterology'), ('Neurology', 'Neurology'), ('Oncology', 'Oncology'), ('Orthopedics', 'Orthopedics'), ('Pediatrics', 'Pediatrics'), ('Psychiatry', 'Psychiatry'), ('Radiology', 'Radiology'), ('Surgery', 'Surgery'), ('Other', 'Other')], max_length=50)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('qualification', models.CharField(max_length=200)),
                ('hospital_affiliation', models.CharField(blank=True, max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='doctors/photos/')),
                ('bio', models.TextField(blank=True, null=True)),
                ('consultation_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('available_days', models.CharField(default='Monday-Friday', max_length=100)),
                ('available_hours', models.CharField(default='9:00 AM - 5:00 PM', max_length=100)),
                ('languages_spoken', models.CharField(default='English', max_length=200)),
                ('emergency_contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Checkup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('checkup_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('checkup_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('checkup_type', models.CharField(choices=[('Routine', 'Routine Checkup'), ('Follow-up', 'Follow-up'), ('Emergency', 'Emergency'), ('Consultation', 'Consultation'), ('Physical Exam', 'Physical Examination'), ('Specialist', 'Specialist Consultation')], default='Routine', max_length=20)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Temperature in Â°F', max_digits=4, null=True)),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Beats per minute', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)])),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Breaths per minute', null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('oxygen_saturation', models.DecimalField(blank=True, decimal_places=2, help_text='SpO2 percentage', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(100)])),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('chief_complaint', models.TextField(help_text='Primary reason for visit')),
                ('symptoms', ckeditor.fields.RichTextField(blank=True, help_text='Detailed symptoms', null=True)),
                ('physical_examination', ckeditor.fields.RichTextField(blank=True, help_text='Physical examination findings', null=True)),
                ('diagnosis', ckeditor.fields.RichTextField(blank=True, help_text='Clinical diagnosis', null=True)),
                ('treatment_plan', ckeditor.fields.RichTextField(blank=True, help_text='Treatment recommendations', null=True)),
                ('medications_prescribed', ckeditor.fields.RichTextField(blank=True, help_text='Prescribed medications', null=True)),
                ('follow_up_instructions', ckeditor.fields.RichTextField(blank=True, help_text='Follow-up care instructions', null=True)),
                ('lab_tests_ordered', ckeditor.fields.RichTextField(blank=True, help_text='Laboratory tests ordered', null=True)),
                ('referrals', ckeditor.fields.RichTextField(blank=True, help_text='Specialist referrals', null=True)),
                ('notes', ckeditor.fields.RichTextField(blank=True, help_text='Additional clinical notes', null=True)),
                ('pain_scale', models.PositiveIntegerField(blank=True, help_text='Pain scale (0-10)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('mental_status', models.CharField(choices=[('Alert', 'Alert and Oriented'), ('Confused', 'Confused'), ('Drowsy', 'Drowsy'), ('Unresponsive', 'Unresponsive'), ('Other', 'Other')], default='Alert', max_length=50)),
                ('skin_color', models.CharField(choices=[('Normal', 'Normal'), ('Pale', 'Pale'), ('Cyanotic', 'Cyanotic'), ('Jaundiced', 'Jaundiced'), ('Other', 'Other')], default='Normal', max_length=50)),
                ('appointment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checkup', to='emr_app.appointment')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checkups', to='emr_app.doctor')),
            ],
            options={
                'ordering': ['-checkup_date'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='emr_app.doctor'),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('employee_number', models.CharField(max_length=20, unique=True)),
                ('role', models.CharField(choices=[('Doctor', 'Doctor'), ('Nurse', 'Nurse'), ('Receptionist', 'Receptionist'), ('Lab Technician', 'Lab Technician'), ('Pharmacist', 'Pharmacist'), ('Administrator', 'Administrator'), ('Other', 'Other')], max_length=50)),
                ('department', models.CharField(max_length=100)),
                ('employment_status', models.CharField(choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time'), ('Contract', 'Contract'), ('Intern', 'Intern'), ('Consultant', 'Consultant')], default='Full-time', max_length=20)),
                ('hire_date', models.DateField()),
                ('phone_number', models.CharField(max_length=17)),
                ('emergency_contact_name', models.CharField(max_length=200)),
                ('emergency_contact_phone', models.CharField(max_length=17)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalDoctor',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('license_number', models.CharField(db_index=True, max_length=50)),
                ('specialization', models.CharField(choices=[('General', 'General Practitioner'), ('Cardiology', 'Cardiology'), ('Dermatology', 'Dermatology'), ('Endocrinology', 'Endocrinology'), ('Gastroenterology', 'Gastroenterology'), ('Neurology', 'Neurology'), ('Oncology', 'Oncology'), ('Orthopedics', 'Orthopedics'), ('Pediatrics', 'Pediatrics'), ('Psychiatry', 'Psychiatry'), ('Radiology', 'Radiology'), ('Surgery', 'Surgery'), ('Other', 'Other')], max_length=50)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('qualification', models.CharField(max_length=200)),
                ('hospital_affiliation', models.CharField(blank=True, max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('profile_photo', models.TextField(blank=True, max_length=100, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('consultation_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('available_days', models.CharField(default='Monday-Friday', max_length=100)),
                ('available_hours', models.CharField(default='9:00 AM - 5:00 PM', max_length=100)),
                ('languages_spoken', models.CharField(default='English', max_length=200)),
                ('emergency_contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical doctor',
                'verbose_name_plural': 'historical doctors',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatient',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('patient_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=1)),
                ('contact_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField()),
                ('city', models.CharField(default='Unknown', max_length=100)),
                ('state', models.CharField(default='Unknown', max_length=100)),
                ('zip_code', models.CharField(default='00000', max_length=10)),
                ('country', models.CharField(default='India', max_length=100)),
                ('blood_type', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-'), ('Unknown', 'Unknown')], default='Unknown', max_length=10)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('allergies', models.TextField(blank=True, help_text='List any known allergies', null=True)),
                ('medical_history', models.TextField(blank=True, help_text='Previous medical conditions', null=True)),
                ('current_medications', models.TextField(blank=True, help_text='Current medications', null=True)),
                ('marital_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced'), ('Widowed', 'Widowed'), ('Other', 'Other')], default='Single', max_length=20)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_name', models.CharField(default='Unknown', max_length=200)),
                ('emergency_contact_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('emergency_contact_relationship', models.CharField(default='Unknown', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('photo', models.TextField(blank=True, max_length=100, null=True)),
                ('insurance_provider', models.CharField(blank=True, max_length=200, null=True)),
                ('insurance_number', models.CharField(blank=True, max_length=50, null=True)),
                ('insurance_expiry', models.DateField(blank=True, null=True)),
                ('preferred_language', models.CharField(default='English', max_length=50)),
                ('occupation_details', models.TextField(blank=True, null=True)),
                ('smoking_status', models.CharField(choices=[('Never', 'Never Smoked'), ('Former', 'Former Smoker'), ('Current', 'Current Smoker'), ('Unknown', 'Unknown')], default='Unknown', max_length=20)),
                ('alcohol_consumption', models.CharField(choices=[('None', 'No Alcohol'), ('Occasional', 'Occasional'), ('Moderate', 'Moderate'), ('Heavy', 'Heavy'), ('Unknown', 'Unknown')], default='Unknown', max_length=20)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical patient',
                'verbose_name_plural': 'historical patients',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('notification_type', models.CharField(choices=[('Appointment', 'Appointment'), ('Checkup', 'Checkup'), ('Lab Test', 'Lab Test'), ('Billing', 'Billing'), ('System', 'System'), ('Security', 'Security')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Urgent', 'Urgent')], default='Medium', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('action_url', models.CharField(blank=True, max_length=500, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=1)),
                ('contact_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField()),
                ('city', models.CharField(default='Unknown', max_length=100)),
                ('state', models.CharField(default='Unknown', max_length=100)),
                ('zip_code', models.CharField(default='00000', max_length=10)),
                ('country', models.CharField(default='India', max_length=100)),
                ('blood_type', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-'), ('Unknown', 'Unknown')], default='Unknown', max_length=10)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('allergies', models.TextField(blank=True, help_text='List any known allergies', null=True)),
                ('medical_history', models.TextField(blank=True, help_text='Previous medical conditions', null=True)),
                ('current_medications', models.TextField(blank=True, help_text='Current medications', null=True)),
                ('marital_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced'), ('Widowed', 'Widowed'), ('Other', 'Other')], default='Single', max_length=20)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_name', models.CharField(default='Unknown', max_length=200)),
                ('emergency_contact_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('emergency_contact_relationship', models.CharField(default='Unknown', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to=emr_app.models.patient_photo_path)),
                ('insurance_provider', models.CharField(blank=True, max_length=200, null=True)),
                ('insurance_number', models.CharField(blank=True, max_length=50, null=True)),
                ('insurance_expiry', models.DateField(blank=True, null=True)),
                ('preferred_language', models.CharField(default='English', max_length=50)),
                ('occupation_details', models.TextField(blank=True, null=True)),
                ('smoking_status', models.CharField(choices=[('Never', 'Never Smoked'), ('Former', 'Former Smoker'), ('Current', 'Current Smoker'), ('Unknown', 'Unknown')], default='Unknown', max_length=20)),
                ('alcohol_consumption', models.CharField(choices=[('None', 'No Alcohol'), ('Occasional', 'Occasional'), ('Moderate', 'Moderate'), ('Heavy', 'Heavy'), ('Unknown', 'Unknown')], default='Unknown', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('record_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('record_type', models.CharField(choices=[('Lab Result', 'Laboratory Result'), ('Imaging', 'Medical Imaging'), ('Prescription', 'Prescription'), ('Vaccination', 'Vaccination Record'), ('Surgery', 'Surgical Record'), ('Allergy', 'Allergy Record'), ('Insurance', 'Insurance Information'), ('Other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', ckeditor.fields.RichTextField()),
                ('record_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('file_attachment', models.FileField(blank=True, null=True, upload_to=emr_app.models.medical_record_path)),
                ('is_confidential', models.BooleanField(default=False)),
                ('requires_followup', models.BooleanField(default=False)),
                ('followup_date', models.DateField(blank=True, null=True)),
                ('lab_results', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('imaging_results', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('interpretation', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('checkup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='emr_app.checkup')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='emr_app.patient')),
            ],
            options={
                'ordering': ['-record_date'],
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('test_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('test_type', models.CharField(choices=[('Blood', 'Blood Test'), ('Urine', 'Urine Test'), ('Stool', 'Stool Test'), ('Imaging', 'Imaging Test'), ('Biopsy', 'Biopsy'), ('Culture', 'Culture Test'), ('Other', 'Other')], max_length=20)),
                ('test_name', models.CharField(max_length=200)),
                ('test_description', models.TextField()),
                ('ordered_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('scheduled_date', models.DateTimeField(blank=True, null=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Ordered', 'Ordered'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled')], default='Ordered', max_length=20)),
                ('results', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('normal_range', models.CharField(blank=True, max_length=200, null=True)),
                ('interpretation', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('recommendations', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('checkup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='emr_app.checkup')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='emr_app.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_tests', to='emr_app.patient')),
            ],
            options={
                'ordering': ['-ordered_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalMedicalRecord',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('record_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('record_type', models.CharField(choices=[('Lab Result', 'Laboratory Result'), ('Imaging', 'Medical Imaging'), ('Prescription', 'Prescription'), ('Vaccination', 'Vaccination Record'), ('Surgery', 'Surgical Record'), ('Allergy', 'Allergy Record'), ('Insurance', 'Insurance Information'), ('Other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', ckeditor.fields.RichTextField()),
                ('record_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('file_attachment', models.TextField(blank=True, max_length=100, null=True)),
                ('is_confidential', models.BooleanField(default=False)),
                ('requires_followup', models.BooleanField(default=False)),
                ('followup_date', models.DateField(blank=True, null=True)),
                ('lab_results', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('imaging_results', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('interpretation', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('checkup', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.checkup')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.patient')),
            ],
            options={
                'verbose_name': 'historical medical record',
                'verbose_name_plural': 'historical medical records',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLabTest',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('test_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('test_type', models.CharField(choices=[('Blood', 'Blood Test'), ('Urine', 'Urine Test'), ('Stool', 'Stool Test'), ('Imaging', 'Imaging Test'), ('Biopsy', 'Biopsy'), ('Culture', 'Culture Test'), ('Other', 'Other')], max_length=20)),
                ('test_name', models.CharField(max_length=200)),
                ('test_description', models.TextField()),
                ('ordered_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('scheduled_date', models.DateTimeField(blank=True, null=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Ordered', 'Ordered'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled')], default='Ordered', max_length=20)),
                ('results', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('normal_range', models.CharField(blank=True, max_length=200, null=True)),
                ('interpretation', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('recommendations', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('checkup', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.checkup')),
                ('doctor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.doctor')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.patient')),
            ],
            options={
                'verbose_name': 'historical lab test',
                'verbose_name_plural': 'historical lab tests',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCheckup',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('checkup_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('checkup_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('checkup_type', models.CharField(choices=[('Routine', 'Routine Checkup'), ('Follow-up', 'Follow-up'), ('Emergency', 'Emergency'), ('Consultation', 'Consultation'), ('Physical Exam', 'Physical Examination'), ('Specialist', 'Specialist Consultation')], default='Routine', max_length=20)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Temperature in Â°F', max_digits=4, null=True)),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Beats per minute', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)])),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Breaths per minute', null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('oxygen_saturation', models.DecimalField(blank=True, decimal_places=2, help_text='SpO2 percentage', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(100)])),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('chief_complaint', models.TextField(help_text='Primary reason for visit')),
                ('symptoms', ckeditor.fields.RichTextField(blank=True, help_text='Detailed symptoms', null=True)),
                ('physical_examination', ckeditor.fields.RichTextField(blank=True, help_text='Physical examination findings', null=True)),
                ('diagnosis', ckeditor.fields.RichTextField(blank=True, help_text='Clinical diagnosis', null=True)),
                ('treatment_plan', ckeditor.fields.RichTextField(blank=True, help_text='Treatment recommendations', null=True)),
                ('medications_prescribed', ckeditor.fields.RichTextField(blank=True, help_text='Prescribed medications', null=True)),
                ('follow_up_instructions', ckeditor.fields.RichTextField(blank=True, help_text='Follow-up care instructions', null=True)),
                ('lab_tests_ordered', ckeditor.fields.RichTextField(blank=True, help_text='Laboratory tests ordered', null=True)),
                ('referrals', ckeditor.fields.RichTextField(blank=True, help_text='Specialist referrals', null=True)),
                ('notes', ckeditor.fields.RichTextField(blank=True, help_text='Additional clinical notes', null=True)),
                ('pain_scale', models.PositiveIntegerField(blank=True, help_text='Pain scale (0-10)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('mental_status', models.CharField(choices=[('Alert', 'Alert and Oriented'), ('Confused', 'Confused'), ('Drowsy', 'Drowsy'), ('Unresponsive', 'Unresponsive'), ('Other', 'Other')], default='Alert', max_length=50)),
                ('skin_color', models.CharField(choices=[('Normal', 'Normal'), ('Pale', 'Pale'), ('Cyanotic', 'Cyanotic'), ('Jaundiced', 'Jaundiced'), ('Other', 'Other')], default='Normal', max_length=50)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.appointment')),
                ('doctor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.doctor')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.patient')),
            ],
            options={
                'verbose_name': 'historical checkup',
                'verbose_name_plural': 'historical checkups',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBilling',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('billing_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('billing_type', models.CharField(choices=[('Consultation', 'Consultation'), ('Procedure', 'Procedure'), ('Lab Test', 'Laboratory Test'), ('Medication', 'Medication'), ('Other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('billing_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('due_date', models.DateField()),
                ('paid_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Paid', 'Paid'), ('Partial', 'Partially Paid'), ('Cancelled', 'Cancelled'), ('Refunded', 'Refunded')], default='Pending', max_length=20)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('insurance_covered', models.BooleanField(default=False)),
                ('insurance_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.appointment')),
                ('checkup', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.checkup')),
                ('doctor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.doctor')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='emr_app.patient')),
            ],
            options={
                'verbose_name': 'historical billing',
                'verbose_name_plural': 'historical billings',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='checkup',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkups', to='emr_app.patient'),
        ),
        migrations.CreateModel(
            name='Billing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('billing_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('billing_type', models.CharField(choices=[('Consultation', 'Consultation'), ('Procedure', 'Procedure'), ('Lab Test', 'Laboratory Test'), ('Medication', 'Medication'), ('Other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('billing_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('due_date', models.DateField()),
                ('paid_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Paid', 'Paid'), ('Partial', 'Partially Paid'), ('Cancelled', 'Cancelled'), ('Refunded', 'Refunded')], default='Pending', max_length=20)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('insurance_covered', models.BooleanField(default=False)),
                ('insurance_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='billings', to='emr_app.appointment')),
                ('checkup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='billings', to='emr_app.checkup')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='billings', to='emr_app.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='billings', to='emr_app.patient')),
            ],
            options={
                'ordering': ['-billing_date'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='emr_app.patient'),
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prescription_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('medication_name', models.CharField(max_length=200)),
                ('dosage', models.CharField(help_text='e.g., 500mg', max_length=100)),
                ('frequency', models.CharField(help_text='e.g., Twice daily', max_length=100)),
                ('duration', models.CharField(help_text='e.g., 7 days', max_length=100)),
                ('instructions', models.TextField(help_text='Special instructions for taking medication')),
                ('prescribed_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Completed', 'Completed'), ('Discontinued', 'Discontinued'), ('On Hold', 'On Hold')], default='Active', max_length=20)),
                ('checkup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='emr_app.checkup')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='emr_app.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='emr_app.patient')),
            ],
            options={
                'ordering': ['-prescribed_date'],
            },
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['last_name', 'first_name'], name='emr_app_pat_last_na_362341_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['patient_id'], name='emr_app_pat_patient_420bcb_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['created_at'], name='emr_app_pat_created_b1e98e_idx'),
        ),
        migrations.AddIndex(
            model_name='checkup',
            index=models.Index(fields=['checkup_date'], name='emr_app_che_checkup_d4fbc3_idx'),
        ),
        migrations.AddIndex(
            model_name='checkup',
            index=models.Index(fields=['checkup_type'], name='emr_app_che_checkup_b99f7a_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['appointment_date'], name='emr_app_app_appoint_11d3a4_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['status'], name='emr_app_app_status_811524_idx'),
        ),
    ]
